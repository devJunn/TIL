git? 분산 버전관리 프로그램

1. 버전관리 
어떤 시점에 수정했는가?
어떤 내용을 수정했는가? -> 변경사항(위치, 내용 등), 커밋 메시지
누가 수정했는가?

가장 최근 파일과 이전 파일들의 변경사항만 관리한다면
(이전 파일들은 역으로 추적가능) 이전 모든 파일들을 
저장하고 관리하는 것보다 효율적
(기존 버전 관리 방식과 비교해서 생각해볼것)

중앙 집중형 버전관리 시스템과 비교하여
로컬(클라이언트)에서 저장 및 관리가 가능하기때문에
빠르고 인터넷 연결이 없어도 가능

CLI기반 버전관리 시스템

git은 크게 4가지 공간에서 파일들이 관리된다.
1. 작업공간
2. 인덱스(Stage area)
3. 로컬 저장소
4. 원격 저장소

공간에 따른 파일들의 상태
1. untracked
2. tracked
    1. staged
    2. committed
    3. modified

git init: 최초로 프로젝트 폴더 경로에서 git으로 관리하겠다는 명령어
.git 숨김파일 생성됨

git status: 상태 확인

git add 파일이름 / git add . :모든 파일 스테이징

git commit -m "커밋 메시지"

git push

참고 vscode
control+~: 터미널 열기 단축키
터미널에서 git bash 사용 가능


-----------------------------------------

Github를 이용한 포트폴리오 관리
참고)
https://github.com/jojoldu

Github?
git기반의 원격 저장소 서비스
오픈소스에 특화
Github외에도 GitLab, Bitbucket등 다른 서비스들도 있다.


branch 가 main이 아니라 master인 경우
git 
내 로컬에 있는 저장소와 깃허브 원격 저장소를 연결하려는 경우
git branch -M main
git remote add origin 주소
git push -u origin main

깃헙에 있는 원격 저장소를 가져오는 경우
1. git clone 주소
오픈 소스의 경우 push가 불가능하기 때문에
Fork를 통해 내 깃헙 계정 레포지토리로 가져온 후 
clone 한다.

----------------------------------------------------

CLI 정리
1.pwd
절대경로 출력
cf) 절대경로 vs 상대경로
절대경로)루트디렉토리부터 현재 디렉토리까지의 모든 경로

절대경로로 이동
cd /
현재 작업 폴더
./
현재 작업 폴더 바로 상위 폴더로 이동
cd ../

cd ..

Tip) end/home 단축키
작성중인 코드 맨 앞/ 맨 뒤로 커서 이동

- git에서 HEAD  
HEAD -> [브랜치 이름]  
현재 브랜치 작업트리의 가장 최근 커밋 또는 특정 브랜치를 가리키는 포인터


- git checkout: 커밋 이동하기
```
# 커밋 해쉬아이디에 해당하는 커밋으로 이동
git checkout [커밋 해쉬아이디]
# HEAD포인터가 가리키는 커밋 기준 2번 이전 커밋으로 이동
git checkout HEAD^^
# HEAD포인터가 가리키는 커밋 기준 2번 이전 커밋으로 이동
git checkout HEAD~2
```
>> git reset vs git checkout
https://blog.naver.com/codeitofficial/222011693376

- git switch: 브랜치 이동하기